# GitHub Actions workflow for testing and preparing the  release.
# GitHub Actions reference: https://help.github.com/en/actions

name: GH Actions Playground Build

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.properties.outputs.version }}
      changelog: ${{ steps.properties.outputs.changelog }}
    steps:
      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.2.2

      # Setup Java 21 environment for the next steps
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: zulu
          java-version: 21
          cache: gradle

      # Set environment variables
      - name: Export Properties
        id: properties
        shell: bash
        run: |
          PROPERTIES="$(./gradlew properties --console=plain -q)"
          VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d ' ')"
          NAME="$(echo "$PROPERTIES" | grep "^group:" | cut -f2- -d ' ')"
          CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain -q)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "name=$NAME" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT

      # Run  build
      - name: Run Build
        run: ./gradlew clean pluginZip --info

      # Prepare  archive content for creating artifact
      - name: Prepare  Artifact
        id: artifact
        shell: bash
        run: |
          cd ${{ github.workspace }}/build/distributions
          FILENAME=$(ls *.zip)
          unzip "$FILENAME" -d content
          echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

      # Store already-built  as an artifact for downloading
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: ./build/distributions/content/*/*

  # Prepare a draft release for GitHub Releases page for the manual verification
  # If accepted and published, release workflow would be triggered
  releaseDraft:
    name: Release Draft
    needs: build
    runs-on: ubuntu-latest
    steps:

      # Check out current repository
      - name: Fetch Sources
        uses: actions/checkout@v4.2.2

      # Remove old release drafts by using GitHub CLI
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/${{ github.repository }}/releases/{}

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ steps.artifact.outputs.filename }}
          path: artifacts/

      # Create new release draft - which is not publicly visible and requires manual acceptance
      - name: Create Release Draft
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cho "${{ needs.build.outputs.changelog }}" > RELEASE_NOTES.md
          gh release create v${{ needs.build.outputs.version }} \
            --draft artifacts/* \
            --target ${GITHUB_REF_NAME} \
            --title "v${{ needs.build.outputs.version }}" \
            --notes-file RELEASE_NOTES.md
